parameters:
  configuration: Release
  projects: '**/[Tt]est/**/*.csproj|**/*[Tt]est*.csproj'
  testFilter: 'Unit'
  buildProjects: true
  collectCodeCoverage: true
  installReportGenerator: true
  reportDirectory: $(Agent.TempDirectory)

steps:
- task: DotNetCoreCLI@2
  displayName: .NET Core Test
  inputs:
    command: test
    projects: ${{ parameters.projects }}
    # TODO: Allow building projects here
    arguments: >
      --no-build
      --no-restore
      --configuration ${{ parameters.configuration }}
      --filter Category=${{ parameters.testFilter }}
      --collect:"XPlat Code Coverage"
      --verbosity detailed
    publishTestResults: true

- ${{ if eq(parameters.collectCodeCoverage, true) }}:
  - ${{ if eq(parameters.installReportGenerator, true )}}:
    - script: dotnet tool install -g dotnet-reportgenerator-globaltool
      displayName: Install Report Generator
      condition: always()

  - script: >
      dotnet tool run reportgenerator
      "-reports:$REPORT_DIRECTORY/**/coverage.cobertura.xml"
      "-targetdir:$REPORT_DIRECTORY/coverlet/reports"
      "-reporttypes:Cobertura"
    displayName: Generate Code Coverage Report
    condition: always()
    continueOnError: true
    env:
      REPORT_DIRECTORY: ${{ parameters.reportDirectory }}

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Results
    condition: always()
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: ${{ parameters.reportDirectory }}/**/Cobertura.xml
      failIfCoverageEmpty: false
